#### CHANGE DIRECTORY

$ScriptDirectory = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
$TargetDirectory = Join-Path -Path $ScriptDirectory -ChildPath "..\public\assets\auto-ss"
$FullTargetDirectory = Resolve-Path -Path $TargetDirectory
Set-Location -Path $FullTargetDirectory

####


###### ADD TEXTUREPACKER TO PATH

$newPath = "C:\Program Files\CodeAndWeb\TexturePacker\bin"

# Add the new directory to the PATH for the current session
$env:PATH = "$env:PATH;$newPath"

######

# Prepare to create the importSpriteSheets.js file
$jsFile = "importSpriteSheets.js"
$jsContent = "/* eslint-disable camelcase */`n"
$jsFunctionBody = ""

# Create the ./compiled folder if it does not exist
$compiledFolder = ".\compiled"
if (-not (Test-Path -Path $compiledFolder)) {
    New-Item -ItemType Directory -Path $compiledFolder | Out-Null
}

# Collect all .tps files in the current directory and store their names without extensions
$CONFIGS = Get-ChildItem -Filter "*.tps" | ForEach-Object { $_.BaseName }

# Iterate over each .tps configuration file
foreach ($CONFIG in $CONFIGS) {
    # Collect all folders prefixed with $CONFIG (e.g., $CONFIG_*)
    $FOLDERS = Get-ChildItem -Directory -Filter ($CONFIG + "_*") | ForEach-Object { $_.Name }
    foreach ($FOLDER in $FOLDERS) {
        # Extract the slug by removing the prefix from the folder name
        $SLUG = $FOLDER.Substring($CONFIG.Length + 1)

        # Construct and run the TexturePacker command
        $command = "TexturePacker.exe .\$CONFIG.tps --data .\compiled\$SLUG.json --sheet .\compiled\$SLUG.png $FOLDER"
        Invoke-Expression $command

        Write-Host "Processed $FOLDER with $CONFIG, saved as $SLUG.json and $slug.png`n"
    
    # Append import lines for each $SLUG
        $jsContent += "import " + $SLUG + "Json from 'assets/auto-ss/compiled/" + $basePath + $SLUG + ".json'`n"
        $jsContent += "import " + $SLUG + "Uri from 'assets/auto-ss/compiled/" + $basePath + $SLUG + ".png'`n"
        $jsFunctionBody += "    imageLoader.addTexture(loadSpritesheet(" + $SLUG + "Uri, " + $SLUG + "Json))`n"
    }

}

# Append the export default function to the JS file content
$jsContent += "`n// This file was autogenerated by the auto-ss.ps1 script.`n`nexport default (imageLoader, loadSpritesheet) => {`n"
$jsContent += $jsFunctionBody
$jsContent += "}"

# Write the content to importSpriteSheets.js
Set-Content -Path $jsFile -Value $jsContent

Write-Host "JavaScript file 'importSpriteSheets.js' created."
Write-Host "Press any key to exit..."
$x = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

